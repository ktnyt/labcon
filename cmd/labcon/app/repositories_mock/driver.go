// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/labcon/app/repositories/driver_iface.go

// Package repositories_mock is a generated GoMock package.
package repositories_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ktnyt/labcon/cmd/labcon/app/models"
)

// MockDriverRepository is a mock of DriverRepository interface.
type MockDriverRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDriverRepositoryMockRecorder
}

// MockDriverRepositoryMockRecorder is the mock recorder for MockDriverRepository.
type MockDriverRepositoryMockRecorder struct {
	mock *MockDriverRepository
}

// NewMockDriverRepository creates a new mock instance.
func NewMockDriverRepository(ctrl *gomock.Controller) *MockDriverRepository {
	mock := &MockDriverRepository{ctrl: ctrl}
	mock.recorder = &MockDriverRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverRepository) EXPECT() *MockDriverRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDriverRepository) Create(name, token string, state interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, token, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDriverRepositoryMockRecorder) Create(name, token, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDriverRepository)(nil).Create), name, token, state)
}

// Delete mocks base method.
func (m *MockDriverRepository) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDriverRepositoryMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDriverRepository)(nil).Delete), name)
}

// Fetch mocks base method.
func (m *MockDriverRepository) Fetch(name string) (models.DriverModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", name)
	ret0, _ := ret[0].(models.DriverModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockDriverRepositoryMockRecorder) Fetch(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockDriverRepository)(nil).Fetch), name)
}

// Update mocks base method.
func (m *MockDriverRepository) Update(driver models.DriverModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDriverRepositoryMockRecorder) Update(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDriverRepository)(nil).Update), driver)
}
